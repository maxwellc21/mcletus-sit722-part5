name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Step 3: Log in to Azure
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 4: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    # Step 5: Terraform Init
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    # Step 6: Import Resource Group if needed
    - name: Import Resource Group
      working-directory: ./terraform
      run: |
        if az group exists --name ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} && \
           ! terraform state list | grep -q azurerm_resource_group.${{ secrets.AZURE_RESOURCE_GROUP_NAME }}; then
          terraform import azurerm_resource_group.${{ secrets.AZURE_RESOURCE_GROUP_NAME }} /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
        fi

    # Step 7: Import ACR if needed
    - name: Import ACR
      working-directory: ./terraform
      run: |
        if az acr show --name ${{ secrets.AZURE_ACR_NAME }} && \
           ! terraform state list | grep -q azurerm_container_registry.libraryreg; then
          terraform import azurerm_container_registry.libraryreg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP_NAME }}/providers/Microsoft.ContainerRegistry/registries/${{ secrets.AZURE_ACR_NAME }}
        fi

    # Step 8: Import AKS if needed
    - name: Import AKS Cluster
      working-directory: ./terraform
      run: |
        if az aks show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} --name ${{ secrets.AZURE_AKS_NAME }} && \
           ! terraform state list | grep -q azurerm_kubernetes_cluster.${{ secrets.AZURE_AKS_NAME }}; then
          terraform import azurerm_kubernetes_cluster.${{ secrets.AZURE_AKS_NAME }} /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP_NAME }}/providers/Microsoft.ContainerService/managedClusters/${{ secrets.AZURE_AKS_NAME }}
        fi

    # Step 9: Terraform Plan
    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        terraform plan \
          -var="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
          -var="acr_name=${{ secrets.AZURE_ACR_NAME }}" \
          -var="aks_name=${{ secrets.AZURE_AKS_NAME }}" \
          -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -var="location=${{ secrets.AZURE_LOCATION }}"

    # Step 10: Terraform Apply
    - name: Terraform Apply
      if: success()
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve \
          -var="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
          -var="acr_name=${{ secrets.AZURE_ACR_NAME }}" \
          -var="aks_name=${{ secrets.AZURE_AKS_NAME }}" \
          -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -var="location=${{ secrets.AZURE_LOCATION }}"

    # Step 11: Log in to ACR
    - name: ACR Login
      run: az acr login --name ${{ secrets.AZURE_ACR_NAME }}

    # Step 12: Grant execute permissions to shell scripts
    - name: Grant Execute Permissions
      run: chmod +x ./scripts/*.sh

    # Step 13: Build Docker Images
    - name: Build Docker Images
      run: ./scripts/build-image.sh

    # Step 14: Push Docker Images
    - name: Push Docker Images
      run: ./scripts/push-image.sh

    # Step 15: Set up kubectl
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'v1.20.0'

    # Step 16: Get AKS Credentials
    - name: Get AKS Credentials
      run: az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} --name ${{ secrets.AZURE_AKS_NAME }}

    # Step 17: Deploy Kubernetes Resources
    - name: Deploy Kubernetes Resources
      run: ./scripts/deploy.sh
